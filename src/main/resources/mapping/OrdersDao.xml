<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hand.al.springbootdemo1.mapper.OrdersDao">
    
    <!--    查询订单信息，关联查询创建订单的用户信息-->
    <!--    方式一：使用resultType 创建一个类继承字段比较多的类-->
    <select id="listOrderCustom" resultType="OrderCustom">
        select
        o.*,
        username,birthday,sex,address
        from orders o
        inner join  test2.user u on u.id = o.user_id;
    </select>
    <!--    查询订单信息，关联查询创建订单的用户信息-->
    <!--    方式二：使用resultMap定义一个结果映射，并在实体类中添加User属性 使用association-->
    <resultMap id="OrderCustomMap" type="Orders">
        <id column="id" property="id"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <association property="user" select="com.hand.al.springbootdemo1.mapper.UserDao.findUserById" column="user_id">

            <id column="id" property="id"/>
            <!-- 必须指定每一个属性 否则对应的属性是空     -->
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
            <!-- 实现对用户信息进行延迟加载
			select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
			要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace
			column：订单信息中关联用户信息查询的列，是user_id
			关联查询的sql理解为：
			SELECT orders.*,
	(SELECT username FROM USER WHERE orders.user_id = user.id)username,
	(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
	 FROM orders
			 -->
        </association>
    </resultMap>
    <select id="listOrderCustom2" resultMap="OrderCustomMap">
        select
        o.*,
        username,birthday,sex,address
        from orders o
        inner join  test2.user u on u.id = o.user_id;
    </select>

    <!--    需求：查询订单以及订单详情 一对多-->
    <!--  1.在订单类中添加订单详情List -->
    <!--  2. 定义resultMap，并继承OrderCustomMap-->
    <resultMap id="OrderAndDetailMap" type="Orders" extends="OrderCustomMap">
        <!-- ofType为空时报错-->
        <!-- Could not resolve type alias ''-->
        <!-- Cannot find class:-->
        <collection property="orderdetails" ofType="Orderdetail">
            <!-- id对应不上时 不报错 但是没有数据-->
            <id property="id" column="id" />
            <result property="itemsNum" column="itemsNum"/>
        </collection>
    </resultMap>
<!--    resultMap值为空时 报错：-->
<!--    Result Maps collection does not contain value-->
    <select id="listOrderAndDetail" resultMap="OrderCustomMap">
        select
        o.*,
        username,birthday,sex,address,
        od.*
        from orders o
        inner join  test2.user u on u.id = o.user_id
        left join test2.orderdetail od on od.orders_id = o.id;
    </select>

<!--    延迟加载-->
<!--    1. 在总配置文件中配置：-->
<!--    <setting name="lazyLoadingEnabled" value="true"/>-->
<!--    <setting name="aggressiveLazyLoading" value="false"/>-->
<!--    2. 在sql仅查询但表信息-->
<!--    3. 在resultMap中的association 中指定 select（关联查询的stamentId） 和 column（关联查询的列）-->
    <resultMap id="OrderCustomMap2" type="Orders">
        <id column="id" property="id"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <association property="user" select="com.hand.al.springbootdemo1.mapper.UserDao.findUserById" column="user_id">
            <!-- 实现对用户信息进行延迟加载
			select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
			要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace
			column：订单信息中关联用户信息查询的列，是user_id
			关联查询的sql理解为：
			SELECT orders.*,
	(SELECT username FROM USER WHERE orders.user_id = user.id)username,
	(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
	 FROM orders
			 -->
        </association>
    </resultMap>
    <select id="lazyListOrderAndDetail" resultMap="OrderCustomMap2">
        select * from orders o;
    </select>
</mapper>

