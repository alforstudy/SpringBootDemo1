<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

<!--    引入外部配置文件使用-->
    <properties resource="config.properties">
        <property name="username" value="dev_user"/>
        <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
<!--    自定义配置属性-->
    <settings>
<!--        全局开关：默认是true，如果它配成false，其余各个Mapper XML文件配成支持cache也没用。-->
        <setting name="cacheEnabled" value="true"/>
<!--        延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。-->
        <setting name="lazyLoadingEnabled" value="true"/>
<!--        是否允许单一语句返回多结果集（需要兼容驱动）。-->
        <setting name="multipleResultSetsEnabled" value="true"/>
<!--        使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。-->
        <setting name="useColumnLabel" value="true"/>
<!--        允许 JDBC 支持自动生成主键，需要驱动兼容。如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。-->
        <setting name="useGeneratedKeys" value="false"/>
<!--        指定 MyBatis 是否以及如何自动映射指定的列到字段或属性。NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集（包括嵌套和其他情况）。-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
<!--        配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新。-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
<!--        设置超时时间，它决定驱动等待数据库响应的秒数。-->
        <setting name="defaultStatementTimeout" value="25"/>
<!--        允许在嵌套语句中使用行分界-->
        <setting name="safeRowBoundsEnabled" value="false"/>
<!--        是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
<!--        MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
<!--        当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
<!--        指定哪个对象的方法触发一次延迟加载。-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
<!--        指定动态 SQL 生成的默认语言。-->
<!--        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver"/>-->
<!--        指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意原始类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="false"/>
<!--        指定 MyBatis 增加到日志名称的前缀。-->
        <setting name="logPrefix" value="AnLei"/>
<!--        指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
<!--        SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING-->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
<!--        为 Mybatis 用来创建具有延迟加载能力的对象设置代理工具。-->
<!--        <setting name="proxyFactory" value="CGLIB"/>-->
    </settings>
    <typeAliases>
<!--        定义别名以简化mapper-->
        <typeAlias type="com.hand.al.springbootdemo1.pojo.AppUser" alias="AppUser"/>
        <package name="com.hand.al.springbootdemo1.pojo"/>
<!--        @Alias("author")-->
    </typeAliases>

<!--    <environments default="development">-->
<!--        <environment id="development">-->
<!--            <transactionManager type="JDBC">-->
<!--                <property name="..." value="..."/>-->
<!--            </transactionManager>-->
<!--            <transactionManager type="MANAGED">-->
<!--                <property name="closeConnection" value="false"/>-->
<!--            </transactionManager>-->
<!--            <dataSource type="POOLED">-->
<!--                <property name="driver" value="${driver}"/>-->
<!--                <property name="url" value="${url}"/>-->
<!--                <property name="username" value="${username}"/>-->
<!--                <property name="password" value="${password}"/>-->
<!--            </dataSource>-->
<!--        </environment>-->
<!--    </environments>-->
    <mappers>
<!--        <mapper resource="mapping/*.xml"/>-->
<!--        <mapper url="file:///var/mappers/BlogMapper.xml"-->
<!--        注意：这种方式必须保证接口名（例如IUserDao）和xml名（IUserDao.xml）相同，还必须在同一个包中。-->
<!--        <mapper class="org.mybatis.builder.BlogMapper"/>-->
<!--        注意：这种方式必须保证接口名（例如IUserDao）和xml名（IUserDao.xml）相同，还必须在同一个包中。-->
<!--        <package name="org.mybatis.builder"-->
    </mappers>
<!--    springBoot 一次性加载多个配置文件的原理-->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        <property name="dataSource" ref="dataSource" />-->
<!--        <property name="configLocation" value="classpath:sqlMapConfig.xml"></property>-->
<!--        <property name="mapperLocations" value="classpath*:com/huaxin/**/*Mapper.xml"></property>-->
<!--    </bean>-->
</configuration>